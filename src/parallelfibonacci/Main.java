/*
Main.java
Lindsay Simpkins
COMP 755
10/4/14

Calculates Fibonnaci numbers. 
User inputs number, n, of Fibonacci numbers to generate by command line.
The Fibonacci sequence will generate the numbers from [0-n], inclusive
A separate thread is spawned to generate the Fibonacci numbers.
The number will be stored in an array; both threads can access it.
The parent thread outputs the sequence generated by the child thread.
The parent thread must wait for the child thread to complete.
 */

package parallelfibonacci;

public class Main {

    /**
     * @param args user inputs the number of Fibonacci numbers to generate
     */
    public static void main(String[] args) {
        int n =5;
        
        //create an array to share with the new thread
        //array is n+1, since the sequence is [0-n] inclusive
        int[] sharedArray = new int[n+1];
        
        //Create and start new thread
        Thread thread = new Thread(new Fibonacci(n, sharedArray));
        thread.start();
        try{
           //join the threads. This makes the parent wait for the child to complete
           //before continuing
           thread.join();
           //print out the Fibonacci sequence
           System.out.println("The Fibonacci sequence from 0-" + n);
           for(int i =0; i<=n; i++){
               System.out.print(sharedArray[i] + " ");
           }
           
        } catch(InterruptedException ie){
            System.err.println("Could not join threads");
        }
    }
    
}
