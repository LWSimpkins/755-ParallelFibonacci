/*
 Main.java
 Lindsay Simpkins
 COMP 755
 10/4/14

 Calculates Fibonnaci numbers. 
 User inputs number, n, of Fibonacci numbers to generate by command line.
 The Fibonacci sequence will generate the numbers from [0-n], inclusive
 A separate thread is spawned to generate the Fibonacci numbers.
 The numbers will be stored in an array; both threads can access it.
 The parent thread must wait for the child thread to complete.
 Then the parent thread outputs the sequence generated by the child thread.
 */
package parallelfibonacci;

public class Main {

    /**
     * @param args user inputs the number of Fibonacci numbers to generate
     */
    public static void main(String[] args) {
        //check if a number was input via command line
        if (args.length > 0) {
            int n = 0;  //The nth Fibonacci number to calculate

            //Verify the command line argument was a number
            try {
                //input n from the command line
                n = Integer.parseInt(args[0]);
            } catch (NumberFormatException e) {
                System.err.println("The command line argument was not an integer");
            }

            //Verify n is >=0
            if (n < 0) {
                System.err.println("The command lin argument must be 0 or greater");
            } else {
            //Create an array to share with the new thread; stores the Fibonacci
                //numbers. array is n+1, since the sequence is [0-n] inclusive
                int[] sharedArray = new int[n + 1];

                //Create and start new thread
                Thread thread = new Thread(new Fibonacci(n, sharedArray));
                thread.start();
                try {
                //join the threads. This makes the parent wait for the child to complete
                    //before continuing
                    thread.join();
                    //print out the Fibonacci sequence
                    System.out.println("The Fibonacci sequence from F(0)-F(" + n + ")");
                    for (int i = 0; i <= n; i++) {
                        System.out.print(sharedArray[i] + " ");
                    }

                } catch (InterruptedException ie) {
                    System.err.println("Could not join threads");
                }
            }
        } else {
            System.err.println("No command line arguments");
        }
    }
}
